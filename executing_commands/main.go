package main

import (
	// implements a logger that prints to stderr
	"log"

	// provides platform independent interface to operating system functionality
	"os"

	// runs external commands
	"os/exec"
)

// handleError accepts an error object and prints fatal log message if there is an error
func handleError(err error) {
	// if error is equal to anything but nil
	if err != nil {
		// prints error to stderr and exits program
		log.Fatal(err)
	}
}

// executeCommand accepts a command and a number of arguments stored in a list, then runs the command
func executeCommand(command string, arguments []string) (err error) {
	// run an external (os) command with the listed arguments
	cmd := exec.Command(command, arguments...)

	// print the output of the command to stdout
	cmd.Stdout = os.Stdout

	// print any errors generated by the command to stderr
	cmd.Stderr = os.Stderr

	// start the specified command and wait for it to complete
	err = cmd.Run()

	// return value will be nil if command ran successfully
	return err
}

// main this is the function that executes when our program runs
func main() {
	// store command to be run on linux
	command := "ls"

	// store command arguments in a list
	args := []string{"-l", "-a", "-h"}

	// or, store command and arguments to be run on Windows
	// command := "dir"
	// args := []string{"/4", "/q"}

	// execute command and print output, store nil or error in err
	err := executeCommand(command, args)

	// handle error if executeCommand returns anything but nil
	handleError(err)
}
