package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
)

// executeCommand accepts a command and a number of arguments stored in a list, then runs the command
func executeCommand(command string, arguments []string) (err error) {
	// run an external (os) command with the listed arguments
	cmd := exec.Command(command, arguments...)

	// print the output of the command to stdout
	cmd.Stdout = os.Stdout

	// print any errors generated by the command to stderr
	cmd.Stderr = os.Stderr

	// start the specified command and wait for it to complete
	err = cmd.Run()

	// return value will be nil if command ran successfully
	return err
}

// handleError accepts an error object and prints fatal log message if there is an error
// also accepts a pointer to bring the interface back up in case of error
func handleError(err error, iface *string) {
	// if error is equal to anything but nil
	if err != nil {
		// bring interface back up
		exec.Command("sudo", "ifconfig", *iface, "up")
		// prints error to stderr and exits program
		log.Fatal(err)
	}
}

// sliceLoop loops through slice, executes command, and handles potential errors
func sliceLoop(command string, args [][]string, iface *string) {
	// for each slice of arguments in args
	// use an underscore to represent values that don't need to be used
	for _, argsList := range args {
		// execute command and print output, store nil or error in err
		err := executeCommand(command, argsList)
		// handle error if executeCommand returns anything but nil
		// pass in interface in case of error
		handleError(err, iface)
	}
}

// main this is the function that executes when our program runs
func main() {
	// store command to be run on linux
	// commands must be run as superuser
	command := "sudo"

	// create command line flags
	// format: --interface=eth0 or --mac=00:11:22:33:44:55
	iface := flag.String("interface", "", "enter your interface")
	newMac := flag.String("mac", "", "enter your new MAC address")
	flag.Parse()

	// if less than two arguments are passed to the application
	if len(os.Args) < 2 {
		// print the following error and example
		fmt.Println("expected 'interface' or 'mac' flags")
		fmt.Println("example: go run macChanger --interface=eth0 --mac=AA:BB:CC:11:22:33")
		// exit program
		os.Exit(1)
	}

	// store command arguments in a slice of slices
	// insert your hw identifier instead of eth0
	args := [][]string{
		{"ifconfig", *iface, "down"},
		{"ifconfig", *iface, "hw", "ether", *newMac},
		{"ifconfig", *iface, "up"},
	}

	// run command with listed args X amount of times
	// pass in interface as well for error handling
	sliceLoop(command, args, iface)
}
